.def counter = r16
.cseg

.org $00

jmp START

 

.org INT0addr

jmp BCD

 

.org INT1addr

jmp MUX

 

.dseg

.org $100

TIME:       .byte 4

 

.cseg

.org INT_VECTORS_SIZE

START:
/*clr r16
ldi r16, 5
clr r17
ldi r17,9
clr r18
ldi r18, 8
		  sts TIME,r18

            sts TIME+1,r16

            sts TIME+2,r17

            sts TIME+3,r16
			clr r16
			clr r17
			clr r18*/
			
            ldi r16,HIGH(RAMEND)

            out SPH,r16

            ldi r16,LOW(RAMEND)

            out SPL,r16

 

            ldi r16,$FF

            out DDRB,r16

            clr r16
			clr counter
 

            call INIT

            call WAIT

 

INIT:

            ldi r16,(1<<ISC01)|(0<<ISC00)|(1<<ISC11)|(0<<ISC10)

            out MCUCR,r16

 

            ldi r16,(1<<INT0)|(1<<INT1)

            out GICR,r16

 

            sei

            ret

 

DISPLAY_SEQ: .db $FC, $60, $FA, $F2, $66, $B6, $BE, $E0, $FE, $E6

 

WAIT:

        /*    call BCD
			call MUX
			call MUX
			call MUX
			call MUX
			call MUX*/
            jmp WAIT

 

BCD:

            push counter

            in counter,SREG

            call BCD_COUNT

            out SREG,counter

            pop counter

            reti

 

BCD_COUNT:

            ldi XH,HIGH(TIME)

            ldi XL,LOW(TIME)

 

CHECK:


CHECK_TEN:

            ld counter,X

            inc counter

            cpi counter,10

            brne STORE

            clr counter

            st X+,counter

CHECK_SIX:

            ld counter,X

            inc counter

            cpi counter,6

            brne STORE

            clr counter

            st X+,counter

            jmp CHECK

 

CLEAR:

            clr counter

            sts TIME,counter

            sts TIME+1,counter

            sts TIME+2,counter

            sts TIME+3,counter

            jmp WAIT

STORE:
	/*		clr r18
			lds r18, TIME+3
			cpi r18, 6
			breq CLEAR
			clr r18
*/
            st X,counter
			ret
			Q
/*DONE:
			jmp	WAIT

       */    

MUX:
            push r16
            ldi	ZL, LOW(TIME)
            ldi	ZH, HIGH(TIME)
            add ZL, r18
            ld	r16, Z
            ldi ZL, LOW(2*DISPLAY_SEQ)
            ldi ZH, HIGH(2*DISPLAY_SEQ)
            add ZL, r16
            lpm r16, Z
			out PORTB, r16
            out PORTA, r18
            inc r18
            cpi r18, 4
            brne MUX_COMP
            clr r18
MUX_COMP:
            pop r16
            reti